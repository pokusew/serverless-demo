#
# GitHub Action Workflow
#   reference: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
#   useful example: https://github.com/mikeal/bundle-size-action/blob/master/.github/workflows/mikeals-workflow.yml
#

name: Build and Test

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
on:
  push:
  pull_request:
  workflow_call:
    inputs:
      deployment:
        required: false
        type: boolean
        default: false
      dry-run:
        required: false
        type: boolean
        default: false
      environment:
        required: false
        type: string
    secrets:
      CLOUDFLARE_ACCOUNT_ID:
        required: false
      CLOUDFLARE_API_TOKEN:
        required: false

env:
  # TODO: forces colorized output in Node.js scripts, better solution?
  # see https://nodejs.org/api/cli.html#force_color1-2-3
  FORCE_COLOR: true

jobs:
  build:
    name: ${{ inputs.deployment && 'Checks & Deployment' || 'Essential checks' }}

    environment: ${{ inputs.environment }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]

    runs-on: ${{ matrix.os }}

    steps:
      # https://github.com/actions/checkout
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # consider built-in cache feature
          # see https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data

      # https://github.com/actions/cache
      # https://github.com/actions/cache/blob/main/examples.md#node---npm
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache npm cache
        # https://github.com/actions/cache
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-

      - name: Install dependencies
        run: npm ci

      # nothing build in the project
      # - name: Build
      #   id: build
      #   if: ${{ success() || failure() }}
      #   # https://askubuntu.com/a/731237
      #   run: |
      #     mkdir -p temp
      #     npm run build |& tee temp/build-output.txt
      #   shell: bash

      - name: Run code formatting check
        # https://askubuntu.com/a/731237
        run: |
          mkdir -p temp
          npm run check-format |& tee temp/prettier-output.txt
        shell: bash

      - name: Run ESLint
        if: ${{ success() || failure() }}
        # https://askubuntu.com/a/731237
        run: |
          mkdir -p temp
          npm run lint |& tee temp/eslint-output.txt
        shell: bash

      - name: Run tsc
        if: ${{ success() || failure() }}
        # https://askubuntu.com/a/731237
        run: |
          mkdir -p temp
          npm run tsc |& tee temp/tsc-output.txt
          npm run tsc -- -p test |& tee -a temp/tsc-output.txt
        shell: bash

      - name: Run unit tests
        # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
        if: ${{ success() || failure() }}
        # if: ${{ steps.build.outcome == 'success' }}
        # https://askubuntu.com/a/731237
        run: |
          mkdir -p temp
          npm run test |& tee temp/test-output.txt
        shell: bash

      - name: Store test results
        if: ${{ success() || failure() }}
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            temp/*-output.txt

      - name: Deploy
        id: deploy
        if: ${{ success() && inputs.deployment == true && inputs.environment != '' }}
        run: |
          npm run deploy -- --dry-run ${{ inputs.dry-run }}
        shell: bash
        env:
          # DEPLOYMENT_VERSION: ${{ format('deploy-{0}@{1}.{2}.{3}', inputs.environment, github.run_id, github.run_number, github.run_attempt) }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Store deployed bundle
        if: ${{ steps.deploy.outcome == 'success' }}
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-bundle
          path: |
            dist
